<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.3.xsd">
	
	<!-- Root Context: defines shared resources visible to all other web components -->
	
	
<!-- 1) PropertyPlaceholderConfigurer를 이용해  외부프로퍼티(db.properties)를 참조할 수 있게 적용 -->	
	<!-- db.properties -->
	<!-- classpath: = ? src/main/resources 를 자동으로 연결해줌 -->
	<bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="locations"> <!-- 단일값일 경우 location -->
			<list>
				<value>classpath:mybatis/db.properties</value>
			</list>
		</property>
	</bean>
	
<!-- 2) 참조한 db.properties를 읽어  BasicDataSource(데이터 베이스 커넥션 풀객체) Bean추가 -->
	<!-- DBCP 기능 -->
	<!-- dataSource -->
	<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource"> <!-- IoC , BasicDataSource dataSource = new BasicDataSource() -->
		<property name="driverClassName" value="${driver}"></property>	   <!-- dataSource.setDriverClassName(${driver}) -->
		<property name="url" value="${url}"></property>					<!--  DI -->
		<property name="username" value="${username}"></property>
		<property name="password" value="${password}"></property>		<!-- properties가 여러개일 경우 properties 값을 A.이름 과 같은 형태로 작성  -->
	</bean>

<!-- 3) mybatis의 SqlSession을 인스턴스화 하기위한 객체 SqlSessionFactoryBean Bean추가
     (위의 BasicDataSourc와 config.xml파일을 속성으로 사용한다) -->	
	<!-- mybatis (sqlSessionFactory) -->
	<bean id="sqlSession" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource"/>
		<property name="configLocation" value="WEB-INF/spring/sqls/config.xml"/>
	</bean>
	
	
	
	
<!-- 4) SqlSessionTemplate Bean추가 Session객체의 사용편의성을 위해 사용한다(자동 오픈 클로즈 지원) -->

	<!-- mybatis (sqlSessionTemplate) -->
	<bean id="sqlSessionTemplate" class="org.mybatis.spring.SqlSessionTemplate">
		<constructor-arg ref="sqlSession"/>
	</bean>



	 <!-- 트랜잭션 처리와 관련된 매니저 객체 설정 -->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource"/>
    </bean>	
    
    <!-- 트랜잭션 처리 방식 -->
    <!-- 프로그래밍적 방식은 여러 메소드나 클래스에 대해서 다중으로 선언해야 하며,
         데이터를 관리하는 측면에서 어떤 트랜잭션 속성이 적용되었는지 찾기 힘들기 때문에
         일반적으로 선언적 방식을 선호한다. -->
         
    <!-- 선언적(XML) 방식 -->
    <tx:advice id="txAdvice" transaction-manager="transactionManager"> <!-- ccc -->
    	<tx:attributes>
    		<!-- 트랜잭션을 처리할 메소드 정의 -->
    		<!-- board_selectOne(), board_insertOne() 등등 이런식으로 사용하기 위해서 앞머리의 이름을 통일 시킨다 -->
<!--     		<tx:method name="select*" rollback-for="Exception" read-only="true"/> -->
<!-- 			<tx:method name="*insert*" rollback-for="Exception"/> -->
    		<tx:method name="*update*" rollback-for="Exception"/>
    		<tx:method name="*delete*" rollback-for="Exception"/>
    		<tx:method name="*Insert*" rollback-for="Exception"/>
    		<tx:method name="*Update*" rollback-for="Exception"/>
    		<tx:method name="*Delete*" rollback-for="Exception"/>
    	</tx:attributes>
    </tx:advice>
    
    <!--aop: 같은 메소드가 여러클래스에 중복적으로 사용되어야 한다 (spring에서 자랑하는 부분 ) 
    	
    execution : 표현식, 직접 코드를 작서하지 않아도 내가 원하는 위치에 메소드를 사용할 수 있또록 설정해줌
    BoardServiceImpl,MemberServiceImpl...등 이런애들의 모든 메서드'.*(..)'
    -->
    <aop:config proxy-target-class="true">
    	<aop:pointcut expression="execution(* com.update.semi.*.*.biz.*BizImpl.*(..))" id="servicePc"/>
    	<!--transactionAdvisor: 위에 있는 내용들이 자동으로 실행 되게 해달라 
    							자동으로 commit을 시켜준다 
    	 -->
    	<aop:advisor id="transactionAdvisor" advice-ref="txAdvice" pointcut-ref="servicePc"/>
    </aop:config>
	
	
	
	<!-- Root Context: defines shared resources visible to all other web components -->
		
	

		
	
	
	
</beans>
